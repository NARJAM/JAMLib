<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace Ceras.Formatters
{
<# for(var i = 1; i <= 8; i++) { 
    Func<int, string>	toT					= x => "T" + ((x == 8) ? "Rest" : x.ToString());
    Func<int, string>	toItemVar			= x => ((x == 8) ? "rest" : "item" + x);
    Func<int, string>	toItemMember		= x => ((x == 8) ? "Rest" : "Item" + x);
    Func<int, string>	toFormatterName		= x => ((x == 8) ? "_rest" : "_item" + x);
    var					ts					= string.Join(", ", Enumerable.Range(1, i).Select(x => toT(x))); 
    var					t					= "ValueTuple<" + ts + ">"; 
	var					items				= string.Join(", ", Enumerable.Range(1, i).Select(x => toItemVar(x))); 
#>

    sealed class ValueTupleFormatter<<#= ts #>> : IFormatter<<#= t #>><#= (t.Contains("TRest") ? " where TRest : struct" : "") #>
    {
<# for(var j = 1; j <= i; j++) { #>
		IFormatter<<#= toT(j) #>> <#= toFormatterName(j) #>Formatter;
<# } #>

        public void Serialize(ref byte[] buffer, ref int offset, <#= t #> value)
        {
<# for(var j = 1; j <= i; j++) { #>
            <#= toFormatterName(j) #>Formatter.Serialize(ref buffer, ref offset, value.<#= toItemMember(j) #>);
<# } #>
        }

		public void Deserialize(byte[] buffer, ref int offset, ref <#= t #> value)
        {
<# for(var j = 1; j <= i; j++) { #>
            <#= toT(j) #> <#= toItemVar(j) #> = default;
<# } #>

<# for(var j = 1; j <= i; j++) { #>
            <#= toFormatterName(j) #>Formatter.Deserialize(buffer, ref offset, ref <#= toItemVar(j) #>);
<# } #>

			value = new ValueTuple<<#= ts #>>(<#= items #>);
        }
    }

<# } #>
}
